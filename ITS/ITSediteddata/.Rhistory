tax.fil.edited = read.csv("112321_tax.fil.edited.csv", sep=',', header=T)
#write.table(tax.fil.edited, file = "112321_tax.fil.edited.txt", col.names = TRUE, row.names = F, quote = FALSE, sep = "\t")
#loading taxonomy table
tax.dec.its <- read.delim("112321_tax.fil.edited.txt", stringsAsFactors = FALSE, sep = "\t")
tax.dec.its <- tax.dec.its %>%
remove_rownames() %>%
column_to_rownames(var = 'OTUid')
dim(tax.dec.its) #[1] 43 otus  7
#loading metadata
map.its
#write.table(map.its, file = "112321_bean.var.map.its.txt",col.names = TRUE, row.names = F, quote = FALSE, sep = "\t")
meta.its <- loadPhenoData("112321_bean.var.map.its.txt", sep="\t",tran = TRUE)
meta.its
#write.table(map.its, file = "112321_bean.var.map.its.txt",col.names = TRUE, row.names = F, quote = FALSE, sep = "\t")
meta.its <- loadPhenoData("112321_bean.var.map.its.txt", sep="\t",tran = TRUE)
meta.its
#create one MRexperiment object
phenotypeData <- AnnotatedDataFrame(meta.its)
phenotypeData
OTUdata <- AnnotatedDataFrame(tax.dec.its)
OTUdata
#create model
fg.data <- newMRexperiment(otu.dec.its$counts, phenoData = phenotypeData, featureData = OTUdata)
fg.data
#cumNormStatFast=Calculates the percentile for which to sum counts up to and scale by.
p <- cumNormStat(fg.data)
p
#cumNorm=Calculates each columnâ€™s quantile and calculates the sum up to and including that quantile.
fg.data.norm <- cumNorm(fg.data, p = p)
fg.data.norm
#export count matrix
fgnorm <- MRcounts(fg.data.norm, norm = TRUE, log = F)
fgnorm <- as.data.frame(fgnorm)
fgnorm
head(sort(colSums(fgnorm, na.rm = FALSE, dims = 1), decreasing = FALSE))
head(sort(rowSums(fgnorm, na.rm = FALSE, dims = 1), decreasing = FALSE))
#write.table(fgnorm, "normalised_logged_fg_otu.txt", sep = "\t", quote = F)
dim(fgnorm) #there are 43 otus and 40 samples
# dissimilarity indices for community ecologist to make a distance structure (Jaccard distance between samples)
fgnorm_PA <- 1*(fgnorm>0)
fgnorm_PA
otu_dist.its <- vegdist(t(fgnorm_PA), binary = TRUE, method = "jaccard") #Sorensen
# CMD/classical multidimensional scaling (MDS) of a data matrix. Also known as principal coordinates analysis
otu_pcoa.its <- cmdscale(otu_dist.its, eig=T)
# scores of PC1 and PC2
ax1.scores.its=otu_pcoa.its$points[,1]
ax2.scores.its=otu_pcoa.its$points[,2]
# calculate percent variance explained, then add to plot
ax1.its <- otu_pcoa.its$eig[1]/sum(otu_pcoa.its$eig)
ax2.its <- otu_pcoa.its$eig[2]/sum(otu_pcoa.its$eig)
its.map.pcoa <- cbind(map.its,ax1.scores.its,ax2.scores.its)
# simple plot
pcoa_plot.its <- plot(ax1.scores.its, ax2.scores.its, xlab=paste("PCoA1: ",round(ax1.its,3)*100,"% var. explained", sep=""), ylab=paste("PCoA2: ",round(ax2.its,3)*100,"% var. explained", sep=""))
######## Calculated the statistical analysis of beta diversity using nested permanova #########
set.seed(13)
adonis.its <- adonis(otu_dist.its ~ map.its$Plant/map.its$Pod,
permutation=999,
method="jaccard",strata = NULL)
adonis.its
set.seed(13)
nested.npmanova(otu_dist.its ~ Plant + Pod,
data = map.its,
method = "jaccard",
permutations = 999)
#install.packages("BiodiversityR")
library(BiodiversityR)
install.packages("BiodiversityR")
nested.npmanova(otu_dist.its ~ Plant + Pod,
data = map.its,
method = "jaccard",
permutations = 999)
library(BiodiversityR)
nested.npmanova(otu_dist.its ~ Plant + Pod,
data = map.its,
method = "jaccard",
permutations = 999)
adonis.its <- adonis(otu_dist.its ~ map.its$Plant/map.its$Pod,
permutation=999,
method="jaccard",strata = NULL)
library(BiodiversityR)
map.its$Plant <- as.factor(map.its$Plant)
map.its$Pod <- as.factor(map.its$Pod)
set.seed(13)
nested.npmanova(otu_dist.its ~ Plant + Pod,
data = map.its,
method = "jaccard",
permutations = 999)
adonis.its <- adonis(otu_dist.its ~ map.its$Plant/map.its$Pod,
permutation=999,
method="jaccard",strata = NULL)
nested.npmanova(otu_dist.its ~ Plant + Pod,
data = map.its,
method = "jaccard",
permutations = 999)
library(BiocManager)
library(vegan)
library(plyr)
library(dplyr)
library(tidyverse)
library(tidyr)
#library(cowplot)
library(ggplot2)
library(reshape)
library(ggpubr)
library(car)
library(agricolae)
library(multcompView)
library(grid)
library(gridExtra)
library(sjmisc)
library(sjPlot)
library(MASS)
library(FSA)
library(onewaytests)
library(ggsignif)
library(PerformanceAnalytics)
library(gvlma)
library(userfriendlyscience)
library(ggpmisc)
library(tibble)
library(fitdistrplus)
# SET THE WORKING DIRECTORY
setwd('/Users/arifinabintarti/Documents/GitHub/Bean_seed_variability_Bintarti_2021/ITS/ITSediteddata')
wd <- print(getwd())
otu.its <- read.table('otu_table_ITS_UPARSE.txt', sep='\t', header=T, row.names = 1)
dim(otu.its) ## total otu= 87, otu table still has Mock, NC, and PC in the sample
#select only biological sample from otu table
otu.its.unfil <- otu.its[,1:45] #unselect Mock, NC, and PC from the otu table
dim(otu.its.unfil)
#otu.its.unfil <- column_to_rownames(otu.its.unfil, var = "OTUid")
sort(rowSums(otu.its.unfil, na.rm = FALSE, dims = 1), decreasing = F)
# remove OTUs that do not present in sample
otu.its1.unfil=otu.its.unfil[which(rowSums(otu.its.unfil) > 0),]
dim(otu.its1.unfil) # otu= 76
sort(rowSums(otu.its1.unfil, na.rm = FALSE, dims = 1), decreasing = F)
#read taxonomy
taxonomy.its = read.csv("112221_ITSotu_taxonomy_RDP_BLAST.csv", header=T)
dim(taxonomy.its) #83 otus, still contains plantae taxa and contaminant microbial taxa
#read the metadata
map.its <- read.csv("112921_map.csv")
#merge 'otu.its' with 'taxonomy.its' to have match otu and taxonomy table
otu.its1.unfil <- rownames_to_column(otu.its1.unfil, var = "OTUid")
otu.tax.its <- merge(otu.its1.unfil,taxonomy.its, by = "OTUid")
dim(otu.tax.its) #72 fungal otus before plant and microbial contaminants removal
#filter out the plantae taxa from the 'otu.tax.its' table
otu.filter <- filter(otu.tax.its, Kingdom != "Plantae", Kingdom != "Unassigned")
dim(otu.filter) #45 otus, filter out  26 plantae taxa and 1 unassigned taxa
#separate the otu table and taxonomy table
otu.tab <- data.frame(otu.filter[,c(1:46)])
dim(otu.tab)# 45 otus,
tax.tab <- data.frame(otu.filter[,c(1,47:53)])
head(tax.tab)
#fungal otu
otu.fg1 <- column_to_rownames(otu.tab, var = "OTUid")
sort(rowSums(otu.fg1, na.rm = FALSE, dims = 1), decreasing = F)
head(otu.fg1)
dim(otu.fg1) #45 plant filtered otus; otu table before normalization using metagenomeSeq package and before decontamination
#otu table of the negative control
#otu.its <- column_to_rownames(otu.its, var = "OTUid")
otu.its.NC <- otu.its[,"NC",drop=FALSE]#only negative control
otu.its.NC
#install and load microDecon package
#install.packages("devtools")
#library(devtools)
#devtools::install_github("donaldtmcknight/microDecon")
library(microDecon)
#merge otu.NC to otu bac and put otu.NC as the first column
otu.its.NC <- rownames_to_column(otu.its.NC, var = "OTUid")
otu.fg1 <- rownames_to_column(otu.fg1, var = "OTUid")
otu.fg1.NC <- merge(otu.its.NC, otu.fg1, by="OTUid")
otu.fg1.NC
dim(otu.fg1.NC)
#decontamination
otu.its.decon <- decon(data = otu.fg1.NC, numb.blanks = 1, numb.ind = 45, taxa = F)
otu.its.decon$OTUs.removed # remove 2 OTUs (OTU_2 and OTU_3)
otu.its.dec.table <- as.data.frame(otu.its.decon$decon.table)
dim(otu.its.dec.table) # otu = 43
#remove NC from the otu.dec.table
otu.its.dec.table <- otu.its.dec.table[,c(1,3:47)]
otu.its.dec.table
dim(otu.its.dec.table)#there are 43 otus and 45 samples
head(otu.its.dec.table)
#use first column as a rownames
otu.its.dec.table <- data.frame(otu.its.dec.table, row.names = 1)
#otu.its.dec.table <- column_to_rownames(otu.its.dec.table, var = "OTUid")
sort(colSums(otu.its.dec.table, na.rm = FALSE, dims = 1), decreasing = T)
sort(rowSums(otu.its.dec.table, na.rm = FALSE, dims = 1), decreasing = F)
# remove samples that have 0 reads #  A21  B21  B31  B44  B54
otu.its.dec.table1=otu.its.dec.table[,which(colSums(otu.its.dec.table) > 0)]
dim(otu.its.dec.table1)#there are 43 otus and 40 samples
#merge 'otu.its.dec.table' with 'tax.tab' to have match otu and taxonomy table
head(tax.tab)
head(otu.its.dec.table1)
otu.its.dec.table1 <- rownames_to_column(otu.its.dec.table1, var = "OTUid")
otu.tax.fil <- merge(otu.its.dec.table1,tax.tab, by = "OTUid")
dim(otu.tax.fil) #43 otus
#separate the taxonomy from the otu table
otu.tax.fil <- column_to_rownames(otu.tax.fil, var = "OTUid")
otu.fil <- data.frame(otu.tax.fil[,c(1:40)])
dim(otu.fil)
tax.fil <- data.frame(otu.tax.fil[,c(41:47)])
#write to  excel to edit the blank with the last taxonomic level possible
#write.csv(tax.fil, file = "112321_tax.plant.microb.fil.csv")
#make the taxonomic csv file "112321_tax.fil.edited.csv"
sort(colSums(otu.fil, na.rm = FALSE, dims = 1), decreasing = FALSE)
sort(rowSums(otu.fil, na.rm = FALSE, dims = 1), decreasing = FALSE)
############# Reads normalization using metagnomeSeq ####################
BiocManager::install("metagenomeSeq")
############# Reads normalization using metagnomeSeq ####################
#BiocManager::install("metagenomeSeq")
library(metagenomeSeq)
#Creating a MRexperiment object
head(otu.its.dec.table1) #make sure you have "OTUid" as the first column
dim(otu.its.dec.table1) # 43 OTUs
#load count data (otu.dec.its)
otu.dec.its <- loadMeta("112921_otu.its.dec.table.txt", sep = "\t")
otu.dec.its$counts
dim(otu.dec.its$counts) #[1] 43 40
#load taxonomy
tax.fil.edited = read.csv("112321_tax.fil.edited.csv", sep=',', header=T)
#write.table(tax.fil.edited, file = "112321_tax.fil.edited.txt", col.names = TRUE, row.names = F, quote = FALSE, sep = "\t")
#loading taxonomy table
tax.dec.its <- read.delim("112321_tax.fil.edited.txt", stringsAsFactors = FALSE, sep = "\t")
tax.dec.its <- tax.dec.its %>%
remove_rownames() %>%
column_to_rownames(var = 'OTUid')
dim(tax.dec.its) #[1] 43 otus  7
#loading metadata
map.its
#write.table(map.its, file = "112321_bean.var.map.its.txt",col.names = TRUE, row.names = F, quote = FALSE, sep = "\t")
meta.its <- loadPhenoData("112321_bean.var.map.its.txt", sep="\t",tran = TRUE)
meta.its
#create one MRexperiment object
phenotypeData <- AnnotatedDataFrame(meta.its)
phenotypeData
OTUdata <- AnnotatedDataFrame(tax.dec.its)
OTUdata
#create model
fg.data <- newMRexperiment(otu.dec.its$counts, phenoData = phenotypeData, featureData = OTUdata)
fg.data
#cumNormStatFast=Calculates the percentile for which to sum counts up to and scale by.
p <- cumNormStat(fg.data)
p
#cumNorm=Calculates each columnâ€™s quantile and calculates the sum up to and including that quantile.
fg.data.norm <- cumNorm(fg.data, p = p)
fg.data.norm
#export count matrix
fgnorm <- MRcounts(fg.data.norm, norm = TRUE, log = F)
fgnorm <- as.data.frame(fgnorm)
fgnorm
head(sort(colSums(fgnorm, na.rm = FALSE, dims = 1), decreasing = FALSE))
head(sort(rowSums(fgnorm, na.rm = FALSE, dims = 1), decreasing = FALSE))
#write.table(fgnorm, "normalised_logged_fg_otu.txt", sep = "\t", quote = F)
dim(fgnorm) #there are 43 otus and 40 samples
library(phyloseq)
# dissimilarity indices for community ecologist to make a distance structure (Jaccard distance between samples)
fgnorm_PA <- 1*(fgnorm>0)
fgnorm_PA
otu_dist.its <- vegdist(t(fgnorm_PA), binary = TRUE, method = "jaccard") #Sorensen
# CMD/classical multidimensional scaling (MDS) of a data matrix. Also known as principal coordinates analysis
otu_pcoa.its <- cmdscale(otu_dist.its, eig=T)
# scores of PC1 and PC2
ax1.scores.its=otu_pcoa.its$points[,1]
ax2.scores.its=otu_pcoa.its$points[,2]
# calculate percent variance explained, then add to plot
ax1.its <- otu_pcoa.its$eig[1]/sum(otu_pcoa.its$eig)
ax2.its <- otu_pcoa.its$eig[2]/sum(otu_pcoa.its$eig)
its.map.pcoa <- cbind(map.its,ax1.scores.its,ax2.scores.its)
# simple plot
pcoa_plot.its <- plot(ax1.scores.its, ax2.scores.its, xlab=paste("PCoA1: ",round(ax1.its,3)*100,"% var. explained", sep=""), ylab=paste("PCoA2: ",round(ax2.its,3)*100,"% var. explained", sep=""))
######## Calculated the statistical analysis of beta diversity using nested permanova #########
set.seed(13)
adonis.its <- adonis(otu_dist.its ~ map.its$Plant/map.its$Pod,
permutation=999,
method="jaccard",strata = NULL)
adonis.its
######## Calculated the statistical analysis of beta diversity using nested permanova #########
set.seed(13)
adonis.its <- adonis(otu_dist.its ~ map.its$Plant/map.its$Pod,
permutation=999,
method="jaccard",strata = NULL)
adonis.its
map.its$Plant <- as.factor(map.its$Plant)
map.its$Pod <- as.factor(map.its$Pod)
set.seed(13)
nested.npmanova(otu_dist.its ~ Plant + Pod,
data = map.its,
method = "jaccard",
permutations = 999)
#install.packages("BiodiversityR")
library(BiodiversityR)
map.its$Plant <- as.factor(map.its$Plant)
map.its$Pod <- as.factor(map.its$Pod)
set.seed(13)
nested.npmanova(otu_dist.its ~ Plant + Pod,
data = map.its,
method = "jaccard",
permutations = 999)
str()
######## Calculated the statistical analysis of beta diversity using nested permanova #########
set.seed(13)
adonis.its <- adonis(otu_dist.its ~ map.its$Plant/map.its$Pod,
permutation=999,
method="jaccard",strata = NULL)
adonis.its
str()
# dissimilarity indices for community ecologist to make a distance structure (Jaccard distance between samples)
fgnorm_PA <- 1*(fgnorm>0)
fgnorm_PA
otu_dist.its <- vegdist(t(fgnorm_PA), binary = TRUE, method = "jaccard") #Sorensen
# CMD/classical multidimensional scaling (MDS) of a data matrix. Also known as principal coordinates analysis
otu_pcoa.its <- cmdscale(otu_dist.its, eig=T)
# scores of PC1 and PC2
ax1.scores.its=otu_pcoa.its$points[,1]
ax2.scores.its=otu_pcoa.its$points[,2]
# calculate percent variance explained, then add to plot
ax1.its <- otu_pcoa.its$eig[1]/sum(otu_pcoa.its$eig)
ax2.its <- otu_pcoa.its$eig[2]/sum(otu_pcoa.its$eig)
its.map.pcoa <- cbind(map.its,ax1.scores.its,ax2.scores.its)
# simple plot
pcoa_plot.its <- plot(ax1.scores.its, ax2.scores.its, xlab=paste("PCoA1: ",round(ax1.its,3)*100,"% var. explained", sep=""), ylab=paste("PCoA2: ",round(ax2.its,3)*100,"% var. explained", sep=""))
######## Calculated the statistical analysis of beta diversity using nested permanova #########
set.seed(13)
adonis.its <- adonis(otu_dist.its ~ map.its$Plant/map.its$Pod,
permutation=999,
method="jaccard",strata = NULL)
str()
otu_dist.its
str(otu_dist.its)
version(vegan)
vegan
library(vegan)
install.packages('vegan')
install.packages("vegan")
adonis.its <- adonis(otu_dist.its ~ map.its$Plant/map.its$Pod,
permutation=999,
method="jaccard",strata = NULL)
traceback()
nested.npmanova(unname(otu_dist.its) ~ Plant + Pod,
data = map.its,
method = "jaccard",
permutations = 999)
set.seed(13)
nested.npmanova(unname(otu_dist.its) ~ Plant + Pod,
data = map.its,
method = "jaccard",
permutations = 999)
adonis.its <- adonis(otu_dist.its ~ map.its$Plant/map.its$Pod,
permutation=999,
method="jaccard",strata = NULL)
unname(otu_dist.its)
otu_dist.its
map.its$Plant <- as.factor(map.its$Plant)
map.its$Pod <- as.factor(map.its$Pod)
set.seed(13)
nested.npmanova(unname(otu_dist.its) ~ Plant + Pod,
data = map.its,
method = "jaccard",
permutations = 999)
set.seed(1)
nested.npmanova(unname(otu_dist.its) ~ Plant + Pod,
data = map.its,
method = "jaccard",
permutations = 999)
its.map.pcoa
nested.npmanova(otu_dist.its ~ Plant + Pod,
data = map.its,
method = "jaccard",
permutations = 999)
DescTools::Abind()
set.seed(13)
nested.npmanova(otu_dist.its ~ Plant + Pod,
data = map.its,
method = "jaccard",
permutations = 999)
#perm <- how(complete = TRUE,
#within   = Within(type = "none"),
#plots    = with(map.its, Plots(strata = Pod, type = "free")))
#adonis2(otu_dist.its ~ Plant + Pod,data = map.its, permutations = perm)
install_github("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis")
#perm <- how(complete = TRUE,
#within   = Within(type = "none"),
#plots    = with(map.its, Plots(strata = Pod, type = "free")))
#adonis2(otu_dist.its ~ Plant + Pod,data = map.its, permutations = perm)
install.packages("devtools")
library("devtools")
install_github("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis")
pairwise.adonis2(otu_dist.its ~ Plant/Pod, data = map.its, strata = 'Pod')
library(pairwiseAdonis)
pairwise.adonis2(otu_dist.its ~ Plant/Pod, data = map.its, strata = 'Pod')
?pairwise.adonis2()
pairwise.adonis2(otu_dist.its ~ map.its$Plant/map.its$Pod,
permutation=999,
method="jaccard",strata = NULL)
pairwise.adonis2(otu_dist.its ~ Plant/Pod, data=map.its,
permutation=999,
method="jaccard",strata = NULL)
nested.npmanova(otu_dist.its ~ Plant + Pod,
data = map.its,
method = "jaccard",
permutations = 999)
set.seed(3)
nested.npmanova(unname(otu_dist.its) ~ Plant + Pod,
data = map.its,
method = "jaccard",
permutations = 999)
adonis.its
######## Calculated the statistical analysis of beta diversity using nested permanova #########
set.seed(13)
adonis.its.t <- adonis(unname(otu_dist.its) ~ map.its$Plant/map.its$Pod,
permutation=999,
method="jaccard",strata = NULL)
adonis.its.t
######## Calculated the statistical analysis of beta diversity using nested permanova #########
set.seed(13)
adonis.its.t <- adonis(unname(otu_dist.its) ~ map.its$Plant/map.its$Pod,
permutation=999,
method="jaccard",strata = NULL)
adonis.its
adonis.its.t
set.seed(13)
nested.npmanova(unname(otu_dist.its) ~ Plant + Pod,
data = map.its,
method = "jaccard",
permutations = 999)
set.seed(13)
nested.npmanova(unname(otu_dist.its) ~ Plant + Pod,
data = map.its,
method = "jaccard",
permutations = 999)
## Betadisper
set.seed  (13)
groups.plant.its <- factor(c(rep("A",11),rep("B",23), rep("C",11)))
otu_dist.its <- vegdist(t(fgnorm_PA), binary = TRUE, method = "jaccard") #Sorensen
mod.its <- betadisper(otu_dist.its, groups.plant.its)
mod.its
mod.its <- betadisper(otu_dist.its, groups.plant.its)
View(phenotypeData)
map.its
groups.plant.its <- factor(c(rep("A",10),rep("B",19), rep("C",11)))
otu_dist.its <- vegdist(t(fgnorm_PA), binary = TRUE, method = "jaccard") #Sorensen
mod.its <- betadisper(otu_dist.its, groups.plant.its)
mod.its
## Betadisper
set.seed  (13)
groups.plant.its <- factor(c(rep("A",10),rep("B",19), rep("C",11)))
otu_dist.its <- vegdist(t(fgnorm_PA), binary = TRUE, method = "jaccard") #Sorensen
mod.its <- betadisper(otu_dist.its, groups.plant.its)
mod.its
mod.its$distances
dispersion.its <- as.data.frame(mod.its$distance)
names(dispersion.its)[names(dispersion.its) == "mod.its$distance"] <- "Dispersion"
#add dispersion index
dispersion.its <- rownames_to_column(dispersion.its, "Sample.id")
#join dispersion index to the map
map.its <- merge(map.its, dispersion.its, by="Sample.id", all = T)
set.seed  (13)
#permutation-based test for multivariate homogeneity of group dispersion (variances)
permod.its <- permutest(mod.its, permutations = 999, pairwise = T)
permod.its # there is no significant differences in dispersion between groups
# load normalized otu table
fgnorm
dim(fgnorm)
head(fgnorm)
# load fungal taxonomy
head(tax.fil.edited)
##calculate the occupancy of each OTUid across Sample.id/Seed
fgnorm.seed.PA <- 1*((fgnorm>0)==1)
Occ.seed.its <- rowSums(fgnorm.seed.PA)/ncol(fgnorm.seed.PA)
df.Occ.seed.its <- as.data.frame(Occ.seed.its)
df.Occ.seed.its <- rownames_to_column(df.Occ.seed.its, var = "OTUid")
df.Occ.seed.its.tax <- merge(df.Occ.seed.its, tax.fil.edited, by="OTUid")
sort.df.Occ.seed.its.tax <- df.Occ.seed.its.tax[order(df.Occ.seed.its.tax$Occ.seed.its, decreasing = TRUE),]
write.csv(sort.df.Occ.seed.its.tax, file = "sort.df.Occ.seed.its.tax.csv")
longDF.plant.its <- data.frame(OTUid=as.factor(rownames(fgnorm)), fgnorm) %>%
gather(Sample.id, abun, -OTUid) %>%  #keep same column nameing as in mapping file, calling counts as "abun" (abundance)
left_join(map.its) %>%  #will add the info form mapping file (grouped by the 'Sample.id' column)
left_join(tax.fil.edited)  %>% #adding the taxonomy info (grouped by the 'OTU.ID' column)
group_by(OTUid, Plant) %>%
#BioProject, plant_family, plant_genus, host, compartment
summarise(n=sum(abun))
##build the new table: OTUid as rownames and Plant as colnames
wideDF.plant.its <- as.data.frame(spread(longDF.plant.its, OTUid, n, fill=0))
rownames(wideDF.plant.its) <-  wideDF.plant.its[,1]
wideDF.plant.its <- wideDF.plant.its[,-1]
wideDF.plant.its <- t(wideDF.plant.its)
dim(wideDF.plant.its) #57 taxa, 3 plant
##calculate the occupancy of each otu across plants
wideDF.plant.PA.its <- 1*((wideDF.plant.its>0)==1)
Occ.plant.its <- rowSums(wideDF.plant.PA.its)/ncol(wideDF.plant.PA.its)
df.Occ.plant.its <- as.data.frame(Occ.plant.its)
df.Occ.plant.its <- rownames_to_column(df.Occ.plant.its, var = "OTUid")
df.Occ.plant.tax.its <- merge(df.Occ.plant.its, tax.fil.edited, by="OTUid")
sort.df.Occ.plant.tax.its <- df.Occ.plant.tax.its[order(df.Occ.plant.tax.its$Occ.plant.its, decreasing = TRUE),]
write.csv(sort.df.Occ.plant.tax.its, file = "sort.df.Occ.plant.tax.its.csv")
## Betadisper
set.seed  (13)
groups.plant.its <- factor(c(rep("A",10),rep("B",19), rep("C",11)))
otu_dist.its <- vegdist(t(fgnorm_PA), binary = TRUE, method = "jaccard") #Sorensen
mod.its <- betadisper(otu_dist.its, groups.plant.its)
mod.its
mod.its$distances
dispersion.its <- as.data.frame(mod.its$distance)
names(dispersion.its)[names(dispersion.its) == "mod.its$distance"] <- "Dispersion"
#add dispersion index
dispersion.its <- rownames_to_column(dispersion.its, "Sample.id")
#join dispersion index to the map
map.its <- merge(map.its, dispersion.its, by="Sample.id", all = T)
set.seed  (13)
#permutation-based test for multivariate homogeneity of group dispersion (variances)
permod.its <- permutest(mod.its, permutations = 999, pairwise = T)
permod.its # there is no significant differences in dispersion between groups
